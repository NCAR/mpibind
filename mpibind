#!/bin/bash

#----------- Function declarations ----------------#
# print usage message and exit
usage () {
   echo "mpibind: an mpiexec wrapper that performs binding of MPI processes and"
   echo "         OpenMP threads for CPU and GPU based codes. Rank and thread layout"
   echo "         info is taken from the PBS select line and translated to appropriate"
   echo "         options for the underlying MPI library. Supported MPI libraries are"
   echo "         cray-mpich, openmpi, and intel-mpi."
   echo ""
   echo " Two modes of operation are supported:"
   echo ""
   echo "   1. Argument free mode:"
   echo "      mpibind <executable> [executable args]"
   echo "      In this mode mpibind launches the executable with binding options"
   echo "      based on the PBS select line and the loaded MPI library, with no"
   echo "      additional arguments passed to the underlying mpiexec command."
   echo ""
   echo "   2. MPI Argument mode:"
   echo "      mpibind [mpibind options] -- <executable> [executable args]"
   echo "      In this mode mpibind launches the executable with binding options"
   echo "      based on the PBS select line and the loaded MPI library, and passes"
   echo "      additional options through to the underlying mpiexec command. Certain"
   echo "      options are recognized by mpibind and translated to the appropriate"
   echo "      option for the specific mpiexec command being wrapped. Other arbitrary"
   echo "      options can be passed through to the mpiexec command as a string using"
   echo "      the --pass-flags=\"flags\" option. These flags are not translated and"
   echo "      the user must verify that they are correct for the loaded MPI library."
   echo "      Note: in this mode the additional \"--\" is required to separate options"
   echo "      intended for the mpiexec command from options intended for the executable."
   echo ""
   echo " Supported options:"
   echo ""
   echo "   -h, --help: print this help message"
   echo ""
   echo "   --ddt: launch bound application with the DDT debugger"
   echo ""
   echo "   --ddt-flags=\"flags\": pass flags through to DDT (see --pass-flags for syntax)"
   echo ""
   echo "   --ddt-connect: shorthand for --ddt --ddt-flags=\"--connect\""
   echo ""
   echo "   --ddt-offline: shorthand for --ddt --ddt-flags=\"--offline\""
   echo ""
   echo "   --label: prefix output with MPI rank"
   echo ""
   echo "   --line-buffer: line buffer MPI output"
   echo ""
   echo "   --map: launch bound application with the MAP profiler"
   echo ""
   echo "   --map-flags=\"flags\": pass flags through to DDT (see --pass-flags for syntax)"
   echo ""
   echo "   --map-connect: shorthand for --map --map-flags=\"--connect\""
   echo ""
   echo "   --map-profile: shorthand for --map --map-flags=\"--profile\""
   echo ""
   echo "   --pass-flags=\"flags\": pass arbitratry MPI flags through to the underlying"
   echo "                         mpiexec command with no translation. Multiple flags"
   echo "                         can be passed as a comma separated list. Supported"
   echo "                         option flags must be long options if they contain"
   echo "                         arguments (e.g. --opt=val). Short options are supported"
   echo "                         if they do not contain arguments (e.g. -V)."
   exit 0
}

# Parse a chunk of the PBS select line and return the mpiexec arguments
parse_chunk () {
   chunk=$1
   nodes_in_chunk=`echo $chunk | sed "s/^\([0-9]\+\).*/\1/"`
   mpi_per_node=`echo $chunk | sed "s/.*mpiprocs=\([0-9]\+\).*/\1/"`
   if [[ $(echo $chunk | grep ompthreads) ]]; then
      omp_per_node=`echo $chunk | sed "s/.*ompthreads=\([0-9]\+\).*/\1/"`
   else
      omp_per_node=1
   fi
   tot_mpi=$((nodes_in_chunk*mpi_per_node))
   if [ $LMOD_FAMILY_MPI == "cray-mpich" ]; then
      printf "%s" "-n $tot_mpi -ppn $mpi_per_node --cpu-bind none -env OMP_NUM_THREADS=$omp_per_node "
   elif [ $LMOD_FAMILY_MPI == "openmpi" ]; then
      printf "%s" "-np $tot_mpi --map-by ppr:$mpi_per_node:node --bind-to none --oversubscribe -x OMP_NUM_THREADS=$omp_per_node -x TMPDIR "
   elif [ $LMOD_FAMILY_MPI == "intel-mpi" ]; then
      printf "%s" "-n $tot_mpi -ppn $mpi_per_node -genvall -genv I_MPI_PIN=no -genv OMP_NUM_THREADS=$omp_per_node "
   else
      >&2 echo "Error: mpibind requires either cray-mpich or intel-mpi"
      exit 1
   fi
}

# determine if we are binding to cpus or gpus
mpibind_style () {
   chunk=$1
   if [[ $(echo $chunk | grep ngpus) ]]; then
      gpus_per_node=`echo $chunk | sed "s/.*ngpus=\([0-9]\+\).*/\1/"`
      if [ "$gpus_per_node" -gt "0" ]; then
         printf "%s" "$BASEDIR/gpu_bind"
      else
         printf "%s" "$BASEDIR/cpu_bind"
      fi
   fi
}

# determine argument free mode or argument parse mode
arg_mode () {
   argline=$1
   unset mode
   # if the first character of the first argument is a dash then
   # assume we are in argument parse mode
   fc="${argline:0:1}"
   if [ "$fc" == "-" ]; then
      mode="argparse"
      # split out arguments intended for mpiexec from the exe
      delimiter=" -- "
      s=$argline$delimiter
      declare -a arg_array=();
      while [[ $s ]]; do
         arg_array+=( "${s%%"$delimiter"*}" );
         s=${s#*"$delimiter"};
      done;
      mpi_opt_line=${arg_array[0]}    # options to pass to the MPI library
      exec_line=${arg_array[1]}       # executable and executable arguments
      # split mpi_opt_line into an array of individual options
      delimiter=" "
      s=$mpi_opt_line$delimiter
      declare -a mpi_opts=();
      while [[ $s ]]; do
         mpi_opts+=( "${s%%"$delimiter"*}" )
         s=${s#*"$delimiter"}
      done
      # parse and translate the MPI options
      parse_mpi_opts mpi_opts
   else
      mode="argfree"
      mpi_opt_line=""
      exec_line=$1
   fi
}

# parse MPI options and
#   1. translate them to the underlying MPI library if possible
#   2. pass through options without translation if requested
#   3. error out if the option is not recognized or not supported
parse_mpi_opts () {
   # Array of MPI options that are recognized by mpibind and
   # can be translated between MPI libraries
   declare -rA xlate_mpi_opt='(["--label","cray-mpich"]="--label"
                               ["--label","openmpi"]="--output=tag"
                               ["--label","intel-mpi"]="--prepend-rank"
                               ["--line-buffer","cray-mpich"]="--line-buffer"
                               ["--line-buffer","openmpi"]="--stream-buffering=1"
                               ["--line-buffer","intel-mpi"]=""
                               )'
   # string of MPI options that will be passed to mpiexec
   mpi_opt_str=""
   local -n opt_arr=$1
   n_opts=${#opt_arr[@]}
   i=0
   while [[ $i -lt $n_opts ]]; do
      opt=${opt_arr[$i]}
      case "$opt" in
         --help | -h)
            # print usage and exit
            usage
            ;;
         --ddt)
            # run a program, bound with mpibind, under the DDT debugger
            launch_helper=ddt
            i=$((i+1))
            ;;
         --ddt-connect)
            # DDT remote connect shortcut
            launch_helper=ddt
            helper_opt_str+="--connect "
            i=$((i+1))
            ;;
         --ddt-offline)
            # DDT offline mode
            launch_helper=ddt
            helper_opt_str+="--offline "
            i=$((i+1))
            ;;
         --label)
            # label MPI output by rank
            xlated=${xlate_mpi_opt["$opt","$LMOD_FAMILY_MPI"]}
            mpi_opt_str+="$xlated "
            i=$((i+1))
            ;;
         --line-buffer)
            # line buffed MPI output
            xlated=${xlate_mpi_opt["$opt","$LMOD_FAMILY_MPI"]}
            mpi_opt_str+="$xlated "
            i=$((i+1))
            ;;
         --map)
            # run a program, bound with mpibind, under the MAP profiler
            launch_helper=map
            i=$((i+1))
            ;;
         --map-connect)
            # MAP remote connect shortcut
            launch_helper=map
            helper_opt_str+="--connect "
            i=$((i+1))
            ;;
         --map-profile)
            # MAP offline mode
            launch_helper=map
            helper_opt_str+="--profile "
            i=$((i+1))
            ;;
         --pass-flags=*|--ddt-flags=*|--map-flags=*)
            # pass MPI flags through to the underlying MPI library
            # no translation is performed, so the user must ensure that the
            # flags are valid for their loaded MPI library

            # strip off the leading --pass-flags=
            flags=${opt#*=}
            # split flags at commas
            delimiter=","
            s=$flags$delimiter
            declare -a flag_array=();
            while [[ $s ]]; do
               flag_array+=( "${s%%"$delimiter"*}" )
               s=${s#*"$delimiter"}
            done
            # add each flag to the mpi_opt_str
            for flag in "${flag_array[@]}"; do
               case "$opt" in
                  --pass*)
                     mpi_opt_str+="$flag "
                     ;;
                  --ddt*|--map*)
                     helper_opt_str+="$flag "
                     ;;
               esac
            done
            i=$((i+1))
            ;;
         *)
            # everything else -- print an error and exit
            echo "unrecognized option: $opt"
            exit 1
            ;;
      esac
   done
}
#----------- End of function declarations / Start of main script --------------#

# base directory of this sctipt
BASEDIR=`dirname -- "$( readlink -f -- "${BASH_SOURCE[0]}"; )"`

# check to see if PBS_NODEFILE is set
# exit with an error, unless -h or --help is specified
if [ -z "$PBS_NODEFILE" ]; then
   if [[ "$1" == "-h" || "$1" == "--help" ]]; then
      usage
   fi
   echo "Error: PBS_NODEFILE is not set. mpibind expects to be run in a PBS job."
   exit 1
fi

# only write log files for small jobs (i.e. <= 32000 ranks)
totranks=$(wc -l $PBS_NODEFILE | awk '{print $1}')
if [ $totranks -le 32000 ]; then
   export enable_logs=1
else
   export enable_logs=0
fi

if [ $enable_logs -eq 1 ]; then
   # check if TMPDIR is set, if not set it to the the users scratch space
   # and make sure it is created
   if [ -z "$TMPDIR" ]; then
      export TMPDIR=/glade/derecho/scratch/$USER/tmp
   fi
   mkdir -p $TMPDIR

   # Create unique temporary logfiles, and export this variable
   # so that it is accessible to the subprocesses cpu_bind and gpu_bind
   export tmp_logdir=$(mktemp --tmpdir -d mpibind.tmpdir.XXXXXXXXXX)
   logfile=mpibind.`echo $PBS_JOBID | sed "s/\./ /g" | awk '{print $1}'`.log
   rm -f $logfile
fi

# determine if we have arguments to parse and pass to the underlying MPI library
arg_mode "$*"

# generate the full mpiexec command based on the PBS select line and the MPI library
select_line=$PBS_SELECT
chunks=`echo $select_line | awk '{split($0,a,"+")} END {for (elem in a) {print a[elem] } }'`

if [ -n "$launch_helper" ]; then
   if ! which $launch_helper >& /dev/null; then
       module load linaro-forge 2> /dev/null
       forge_ver=`ml 2>&1 | egrep -o "linaro-forge\/.+"`
       echo "Warning: $launch_helper not in PATH. Loading the default linaro-forge module ($forge_ver)."
   fi
   mpicmd="$launch_helper $helper_opt_str mpiexec $mpi_opt_str"
else
   mpicmd="mpiexec $mpi_opt_str"
fi

if [ $enable_logs -eq 1 ]; then
   echo "Chunk info" > $tmp_logdir/logfile
fi
for c in $chunks; do
   if [ $enable_logs -eq 1 ]; then
      echo "  $c" >> $tmp_logdir/logfile
   fi
   mpicmd+=`parse_chunk $c`
   mpicmd+=`mpibind_style $c`
   mpicmd+=" $exec_line : "
done
mpicmd=`echo "$mpicmd" | sed "s/: $//"`
if [ $enable_logs -eq 1 ]; then
   echo "-- -- -- --"     >> $tmp_logdir/logfile
   echo "MPI exec line:"  >> $tmp_logdir/logfile
   echo "  $mpicmd"       >> $tmp_logdir/logfile
   echo "-- -- -- --"     >> $tmp_logdir/logfile
   echo "Binding Report:" >> $tmp_logdir/logfile
fi

# if debugging/profiling on GPUs, set CUDA_DEBUGGER_SOFTWARE_PREEMPTION=1
if [[ "$launch_helper" == "map" || "$launch_helper" == "ddt" ]]; then
   if [[ "$mpicmd" == *"gpu_bind"* ]]; then
      echo "Enabling CUDA_DEBUGGER_SOFTWARE_PREEMPTION for GPU debugging/profiling"
      export CUDA_DEBUGGER_SOFTWARE_PREEMPTION=1
   fi
fi
# execute the mpiexec command
$mpicmd

# collect the binding report and clean up the temporary logfiles
if [ $enable_logs -eq 1 ]; then
   cat $tmp_logdir/rankinfo.* | sort -g -k 2 >> $tmp_logdir/logfile
   mv $tmp_logdir/logfile $logfile
   rm -rf $tmp_logdir
fi
