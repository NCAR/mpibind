#!/bin/bash

# tmp_logdir should be set int the mpibind calling script
if [ $enable_logs -eq 1 ]; then
  if [ -z "$tmp_logdir" ]; then
      echo "ERROR: tmp_logdir is undefined, it should be set by mpibind!"
      echo "($0 is not intended to be called directly)"
      exit 1
  fi
fi

if [ $LMOD_FAMILY_MPI == "cray-mpich" ]; then
  export MPICH_GPU_SUPPORT_ENABLED=1
  grank=$PMI_RANK
  lrank=$PMI_LOCAL_RANK
  lsize=$PMI_LOCAL_SIZE
elif [ $LMOD_FAMILY_MPI == "openmpi" ]; then
  grank=$OMPI_COMM_WORLD_RANK
  lrank=$OMPI_COMM_WORLD_LOCAL_RANK
  lsize=$OMPI_COMM_WORLD_LOCAL_SIZE
else
  >&2 echo "Error: mpibind requires cray-mpich for binding GPU applications"
  exit 2
fi

if [[ -z "$MPICH_OFI_NIC_POLICY" ]]; then
   export MPICH_OFI_NIC_POLICY=GPU
fi

nsock=`lscpu | grep Socket | awk '{print $2}'`
cpsock=`lscpu | grep "per sock" | awk '{print $4}'`
rank_per_sock=$((lsize/nsock + (lsize%nsock)))
cores=()
for i in `seq 0 $((cpsock/rank_per_sock)) $((cpsock - 1))`; do
	cores+=("$i")
done
export CUDA_VISIBLE_DEVICES=`nvidia-smi topo -c ${cores[lrank]} | egrep "^[0-9]+"`
export MPIBIND_GPU_UUID=`nvidia-smi -L | grep "GPU $CUDA_VISIBLE_DEVICES:" | egrep -o "GPU-[a-f,0-9]+-[a-f,0-9]+-[a-f,0-9]+-[a-f,0-9]+-[a-f,0-9]+"`
if [ $enable_logs -eq 1 ]; then
  echo "rank: $grank, cores: ${cores[lrank]}, CUDA DEVICE: $CUDA_VISIBLE_DEVICES, UUID: $MPIBIND_GPU_UUID" > $tmp_logdir/rankinfo.$grank
fi
exec numactl -C "${cores[lrank]}" $*
